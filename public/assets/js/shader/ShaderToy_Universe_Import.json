{
  "id": 247,
  "name": "ShaderToy Universe Import",
  "fragment": "precision highp float;\nprecision highp int;\nuniform sampler2D iChannel0;\nuniform vec2 resolution;\nuniform float time;\nvarying vec2 vUv;\nfloat field(in vec3 p, float s) \n{\n    float strength = 7. + .03 * log(1.e-6 + fract(sin(time) * 4373.11));\n    float accum = s / 4.;\n    float prev = 0.;\n    float tw = 0.;\n    for (int i = 0; i < 26; ++i) \n    {\n        float mag = dot(p, p);\n        p = abs(p) / mag + vec3(-.5, -.4, -1.5);\n        float w = exp(-float(i) / 7.);\n        accum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n        tw += w;\n        prev = mag;\n    }\n    return max(0., 5. * accum / tw - .7);\n}\nfloat field2(in vec3 p, float s) \n{\n    float strength = 7. + .03 * log(1.e-6 + fract(sin(time) * 4373.11));\n    float accum = s / 4.;\n    float prev = 0.;\n    float tw = 0.;\n    for (int i = 0; i < 18; ++i) \n    {\n        float mag = dot(p, p);\n        p = abs(p) / mag + vec3(-.5, -.4, -1.5);\n        float w = exp(-float(i) / 7.);\n        accum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n        tw += w;\n        prev = mag;\n    }\n    return max(0., 5. * accum / tw - .7);\n}\nvec3 nrand3(vec2 co) \n{\n    vec3 a = fract(cos(co.x * 8.3e-3 + co.y) * vec3(1.3e5, 4.7e5, 2.9e5));\n    vec3 b = fract(sin(co.x * 0.3e-3 + co.y) * vec3(8.1e5, 1.0e5, 0.1e5));\n    vec3 c = mix(a, b, 0.5);\n    return c;\n}\nvoid main() \n{\n    vec2 uv = 2. * vUv.xy / resolution.xy - 1.;\n    vec2 uvs = uv * resolution.xy / max(resolution.x, resolution.y);\n    vec3 p = vec3(uvs / 4., 0) + vec3(1., -1.3, 0.);\n    p += .2 * vec3(sin(time / 16.), sin(time / 12.), sin(time / 128.));\n    float freqs[4];\n    freqs[0] = texture2D(iChannel0, vec2(0.01, 0.25)).x;\n    freqs[1] = texture2D(iChannel0, vec2(0.07, 0.25)).x;\n    freqs[2] = texture2D(iChannel0, vec2(0.15, 0.25)).x;\n    freqs[3] = texture2D(iChannel0, vec2(0.30, 0.25)).x;\n    float t = field(p, freqs[2]);\n    float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));\n    vec3 p2 = vec3(uvs / (4. + sin(time * 0.11) * 0.2 + 0.2 + sin(time * 0.15) * 0.3 + 0.4), 1.5) + vec3(2., -1.3, -1.);\n    p2 += 0.25 * vec3(sin(time / 16.), sin(time / 12.), sin(time / 128.));\n    float t2 = field2(p2, freqs[3]);\n    vec4 c2 = mix(.4, 1., v) * vec4(1.3 * t2 * t2 * t2, 1.8 * t2 * t2, t2 * freqs[0], t2);\n    vec2 seed = p.xy * 2.0;\n    seed = floor(seed * resolution.x);\n    vec3 rnd = nrand3(seed);\n    vec4 starcolor = vec4(pow(rnd.y, 40.0));\n    vec2 seed2 = p2.xy * 2.0;\n    seed2 = floor(seed2 * resolution.x);\n    vec3 rnd2 = nrand3(seed2);\n    starcolor += vec4(pow(rnd2.y, 40.0));\n    gl_FragColor = mix(freqs[3] - .3, 1., v) * vec4(1.5 * freqs[2] * t * t * t, 1.2 * freqs[1] * t * t, freqs[3] * t, 1.0) + c2 + starcolor;\n}\n",
  "vertex": "/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\nvoid main() {\n\n    // To pass variables to the fragment shader, you assign them here in the\n    // main function. Traditionally you name the varying with vAttributeName\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n\n    // This sets the position of the vertex in 3d space. The correct math is\n    // provided below to take into account camera and object data.\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",
  "uniforms": {
    "cameraPosition": {
      "name": "cameraPosition",
      "type": "v3",
      "glslType": "vec3",
      "description": ""
    },
    "time": {
      "name": "time",
      "type": "f",
      "glslType": "float",
      "description": ""
    },
    "iChannel0": {
      "name": null,
      "type": "t",
      "glslType": "sampler2D",
      "value": {
        "created_at": null,
        "description": "Chromatic Noise",
        "id": 50,
        "image": "chromatic-noise.png",
        "thumbnail": "../../data/img/cloud10 (1).png",
        "name": "Chromatic Noise",
        "updated_at": null,
        "user_id": null
      },
      "description": ""
    },
    "resolution": {
      "name": null,
      "type": "v2",
      "glslType": "vec2",
      "value": {
        "x": 1,
        "y": 1
      },
      "description": ""
    }
  },
  "url": "http://shaderfrog.com/app/view/247",
  "user": {
    "username": "andrewray",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}